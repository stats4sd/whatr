ggplot(data=somedata,aes(x=X,y=Y,col=cluster))+geom_point()
somedata$cluster<-factor(cutree(cluster1,5))
ggplot(data=somedata,aes(x=X,y=Y,col=cluster))+geom_point()
somedata<-data.frame(ID=1:100,X=rnorm(100),Y=rnorm(100),Z=rnorm(100),Q=rnorm(100),Fruit=sample(c("Apples","Oranges"),size=100,replace=TRUE))
logistic1<-glm(Fruit~cluster,data=somedata,family="binomial")
somedata$cluster<-factor(cutree(cluster1,5))
logistic1<-glm(Fruit~cluster,data=somedata,family="binomial")
summary(logistic1)
anova(logistic1,test="LRT")
clusplot(PCAData, somedata$cluster, color=TRUE,labels = 2)
melteddata<-melt(somedata,id.vars = c("ID","cluster"))
library(ggplot2)
ggplot(data=melteddata,aes(y=value,group=cluster,x=cluster))+geom_boxplot()+facet_wrap(~variable)
melteddata<-melt(somedata,id.vars = c("ID","cluster","Fruit"))
ggplot(data=melteddata,aes(y=value,group=cluster,x=cluster))+geom_boxplot()+facet_wrap(~variable)
ggplot(data=melteddata,aes(y=value,group=cluster))+geom_boxplot()+facet_wrap(~variable)
ggplot(data=melteddata,aes(y=value,x=cluster))+geom_boxplot()+facet_wrap(~variable)
table(somedata$cluster,somedata$Fruit)
cluster1<-hclust(pca1$scores,method = "ward.D")
pca1<-princomp(PCAData,cor=TRUE)
cluster1<-hclust(pca1$scores,method = "ward.D")
clusplot(PCAData, somedata$cluster, color=TRUE,labels = 2)
c1<-clusplot(PCAData, somedata$cluster, color=TRUE,labels = 2)
c1
#standard dendrogram again
plot(cluster1)
##identify cluster membership; 5 means choose 5 clusters. can change the number for whatever number of clusters you want
rect.hclust(cluster1,5)
library(reshape2)
melteddata<-melt(somedata,id.vars = c("ID","cluster","Fruit"))
library(ggplot2)
ggplot(data=melteddata,aes(y=value,x=cluster))+geom_boxplot()+facet_wrap(~variable)
ggplot(data=somedata,aes(x=X,y=Y,col=cluster))+geom_point()
ggplot(data=somedata,aes(x=X,y=Y,col=cluster))+geom_point(size=4)
ggplot(data=somedata,aes(x=X,y=Y,col=cluster))+geom_point(size=3)
ggpairs(somedata, aes(colour = cluster, alpha = 0.4))
library(GGally)
ggpairs(somedata, aes(colour = cluster, alpha = 0.4))
?ggpairs
ggpairs(somedata)
data(tips, package = "reshape")
pm <- ggpairs(tips[, 1:3])
pm
detach("package:GGally", unload=TRUE)
install.packages("GGally")
library(GGally)
install.packages("GGally")
library(GGally)
install.packages("GGally")
library(GGally)
stattable<-function(rowfactor,columnfactor,outcome,FUN=mean,...){
require(reshape2)
x<-data.frame(rowfactor,columnfactor,outcome)
y<-dcast(rowfactor~columnfactor,data=x,value.var="outcome",fun.aggregate = FUN,...)
rownames(y)<-y$rowfactor
y<-y[,-1]
colnames(y)<-levels(as.factor(as.character(columnfactor)))
return(y)
}
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,na.rm=T)
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,median,na.rm=T)
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,length)
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,rank)
stattable<-function(rowfactor,columnfactor,outcome,FUN=mean,...){
x<-data.frame(rowfactor,columnfactor,outcome)
y<-tapply(outcome,list(rowfactor,columnfactor),FUN,...)
return(y)
}
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,rank)
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,mean)
library(agricolae)
data(plrv)
stattable(plrv$Genotype,plrv$Locality,plrv$Yield,sd)
file.choose()
file.choose()
devtools::install_github("rstudio/addinexamples", type = "source")
addinexamples:::subsetAddin()
library(readr)
DataForBiplot <- read_csv("C:/Users/sdumb/Dropbox (SSD)/McKnight/Resources/SA Training/DataForBiplot.csv")
View(DataForBiplot)
addinexamples:::subsetAddin()
addinexamples:::subsetAddin()
View(DataForBiplot)
library(readr)
DataForBiplot <- read.csv("C:/Users/sdumb/Dropbox (SSD)/McKnight/Resources/SA Training/DataForBiplot.csv")
View(DataForBiplot)
addinexamples:::subsetAddin()
addinexamples:::findAndReplaceAddin()
addinexamples:::subsetAddin()
dataset<-read.csv(file.choose())
dataset<-read.csv(file.choose(),row.names = 1)
?lsmeans
library(lsmeans)
?lsmeans
require(lsmeans)
fiber.lm <- lm(strength ~ diameter + machine, data = fiber)
( fiber.lsm <- lsmeans (fiber.lm, "machine") )
contrast(fiber.lsm, "trt.vs.ctrlk")
pairs(fiber.lsm, "trt.vs.ctrlk")
lsmeans (fiber.lm, "machine", contr = "trt.vs.ctrlk")
warp.lm <- lm(breaks ~ wool * tension, data = warpbreaks)
( warp.lsm <- lsmeans (warp.lm,  ~ wool | tension,
options = list(estName = "pred.breaks")) )
pairs(warp.lsm) # remembers 'by' structure
contrast(warp.lsm, method = "poly", by = "wool")
57/30
30.40/16
library(shiny)
?numericInput
?selectInput
?checkboxInput
?geom_boxplot
library(ggplot2)
?geom_boxplot
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?numericInput
?selectInput
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?renderPlot
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?reactive
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?reactiveValues
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
shiny::runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?textInput
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?strsplit
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?numericInput
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?qnorm
qnorm(0.95)
qnorm(0.975)
qnorm(1-(1-0.95)/2)
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
?fluidPage
?sidebarPanel
?mainPanel
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/Sampling_1')
2^32
376+466
2450+357+1074+965+1433
500/40
decimate<-function(x){
paste(round(x*10),10,sep="/")
}
decimate(0.2344)
load("C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF/shinydata.RData")
?selectInput
shiny::runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
summary
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
?sliderInput
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/DEFF')
read.csv("C:/Users/sdumb/Dropbox (SSD)/Indonesia/Data Files/eastbournedata.csv")
eb<-read.csv("C:/Users/sdumb/Dropbox (SSD)/Indonesia/Data Files/eastbournedata.csv")
library(ggplot2)
ggplot(data=eb,aes(y=yyyy,x=tmax))+stat_summary(geom="point")
ggplot(data=eb,aes(x=yyyy,y=tmax))+stat_summary(geom="point")
ggplot(data=eb,aes(x=yyyy,y=tmax))+stat_summary(geom="point")+ylab("Average Daily High Temperature")+xlab("Year")
ggplot(data=eb,aes(x=yyyy,y=tmax))+stat_summary(geom="point",size=2)+ylab("Average Daily High Temperature")+xlab("Year")
p1<-ggplot(data=eb,aes(x=yyyy,y=tmax))+stat_summary(geom="point",size=2)+ylab("Average Daily High Temperature")+xlab("Year")
p1+stat_smooth(method="lm",se=FALSE)
p1<-ggplot(data=eb,aes(x=yyyy,y=tmax))+stat_summary(geom="point",size=2)+ylab("Average Daily High Temperature")+xlab("Year")
p1
p1+stat_smooth(method="gam",se=FALSE)
library(dplyr)
summarise(.data = eb,group_by(yyyy),tmax=mean(tmax))
?summarise
summarise(.data = eb,group_by(as.character(yyyy)),tmax=mean(tmax))
summarise(.data = eb,group_by(factor(yyyy)),tmax=mean(tmax))
doBy::summaryBy(tmax+tmin~yyyy,data=eb,keep.names = TRUE,FUN=mean)
eb2<-doBy::summaryBy(tmax+tmin~yyyy,data=eb,keep.names = TRUE,FUN=mean)
p1<-ggplot(data=eb2,aes(x=yyyy,y=tmax))+geom_point(size=2)+ylab("Average Daily High Temperature")+xlab("Year")
p1
p1+stat_smooth(method="lm",se=FALSE)
p1+stat_smooth(method="gam",se=FALSE)
View(eb2)
install.packages("gapminder")
install.packages("repurrsive")
install.packages("repurrrsive")
repurrrsive::gap_nested
gapminder::gapminder_unfiltered
gapminder::gapminder
?gapminder
gap_bit <- subset(gapminder, year == 2007 & continent != "Oceania")
gap_bit <- gap_bit[with(gap_bit, order(continent, -1 * pop)), ]
ggplot(gap_bit, aes(x = gdpPercap, y = lifeExp, size = pop)) +
scale_x_log10(limits = c(150, 115000)) + ylim(c(16, 96)) +
geom_point(pch = 21, color = 'grey20', show_guide = FALSE) +
scale_size_area(max_size = 40) +
facet_wrap(~ continent) + coord_fixed(ratio = 1/43) +
aes(fill = country) + scale_fill_manual(values = country_colors) +
theme_bw() + theme(strip.text = element_text(size = rel(1.1)))
}
library(gapminder)
gap_bit <- subset(gapminder, year == 2007 & continent != "Oceania")
gap_bit <- gap_bit[with(gap_bit, order(continent, -1 * pop)), ]
ggplot(gap_bit, aes(x = gdpPercap, y = lifeExp, size = pop)) +
scale_x_log10(limits = c(150, 115000)) + ylim(c(16, 96)) +
geom_point(pch = 21, color = 'grey20', show_guide = FALSE) +
scale_size_area(max_size = 40) +
facet_wrap(~ continent) + coord_fixed(ratio = 1/43) +
aes(fill = country) + scale_fill_manual(values = country_colors) +
theme_bw() + theme(strip.text = element_text(size = rel(1.1)))
}
install.packages("nasaweather")
nasaweather::atmos
nasaweather::storms
?nasaweather::storms
?nasaweather::atmos
library(tidyverse)
lm(yyyy~tmax,data=eb2)
m1<-lm(yyyy~tmax,data=eb2)
tidy(m1)
??tidy
broom::tidy(m1)
ggplot(data=eb2)+geom_point(aes(y=tmin,x=yyyy))
ggplot(data=eb2)+geom_point(aes(y=tmin,x=yyyy))+geom_smooth()
ggplot(data=eb2)+geom_point(aes(y=tmin,x=yyyy))+geom_smooth(aes(y=tmin,x=yyyy))
ggplot(data=eb2)+geom_point(aes(y=tmin,x=yyyy))+geom_smooth(aes(y=tmin,x=yyyy),method="lm")
broom::confint_tidy(m1)
broom::glance(m1)
m1<-lm(tmax~yyyy,data=eb2)
m1<-lm(tmin~yyyy,data=eb2)
broom::tidy(m1)
broom::confint_tidy(m1)
broom::glance(m1)
m1<-lm(tmax~yyyy,data=eb2)
broom::tidy(m1)
broom::confint_tidy(m1)
broom::glance(m1)
# You can write code in chunks that look like this.
# This chunk uses some code from base R to plot a data set.
# To run the code click the Green play button to the right. Try it!
plot(cars)
plot(cars)
# You can write code in chunks that look like this.
# This chunk uses some code from base R to plot a data set.
# To run the code click the Green play button to the right. Try it!
plot(cars
# You can write code in chunks that look like this.
# This chunk uses some code from base R to plot a data set.
# To run the code click the Green play button to the right. Try it!
plot(cars1)
# You can write code in chunks that look like this.
# This chunk uses some code from base R to plot a data set.
# To run the code click the Green play button to the right. Try it!
mean(cars)
summary(cars)
# You can write code in chunks that look like this.
# This chunk uses some code from base R to plot a data set.
# To run the code click the Green play button to the right. Try it!
summary(eb)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
learnr::run_tutorial()
learnr::run_tutorial("dplyr")
learnr::run_tutorial(package = "dplyr")
learnr::run_tutorial(name="",package = "dplyr")
unlink('Untitled/Untitled_cache', recursive = TRUE)
install.packages("tsibble")
library(tsibble)
?fill_na
harvest <- tsibble(
year = c(2010, 2011, 2013, 2011, 2012, 2014),
fruit = rep(c("kiwi", "cherry"), each = 3),
kilo = sample(1:10, size = 6),
key = id(fruit), index = year
)
# leave NA as is ----
full_harvest <- fill_na(harvest)
full_harvest
harvest <- tsibble(
yyyy = c(2010, 2011, 2013, 2011, 2012, 2014),
fruit = rep(c("kiwi", "cherry"), each = 3),
kilo = sample(1:10, size = 6),
key = id(fruit), index = yyyy
)
# leave NA as is ----
full_harvest <- fill_na(harvest)
full_harvest
?spread
library(dplyr)
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
stocks
stocksm
stocksm %>% spread(time, price:stock)
stocksm %>% spread(time, c(price,stock))
stocksm %>% spread(time, c("price","stock"))
load("C:/Users/sdumb/Downloads/gss.Rda")
gss
label(gss)
?dplyr::filter()
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
UKIreland<-read.csv(url("http://shiny.stats4sd.org/Reading_R/UKIreland.csv"))
UKIreland[1,]
UKIreland[,1]
UKIreland[10:12,1:5]
filter(UKIreland,country=="United Kingdom")
UKData<-filter(UKIreland,country=="United Kingdom")
UKData
filter(UKIreland,country="United Kingdom")
filter(UKIreland,country=="united kingdom")
filter(UKIreland,country=="UK")
filter(UKIreland,Country=="United Kingdom")
filter(UKData,date>2005&date<2010)
filter(UKData,unemployment==max(unemployment))
select(UKIreland,country,date,gdp,population)
select(UKIreland,country:population)
select(UKIreland,starts_with("c"))
select(UKIreland,contains("nt"))
mutate(UKIreland,populationmill=population/1000000)
mutate(UKIreland,unemp_no=0.55*population*unemployment)
filter(UKIreland,unemployment==max(unemployment))
UKIreland_grp<-group_by(UKIreland,country)
filter(UKIreland_grp,unemployment==max(unemployment))
UKIreland_grp_date<-group_by(UKIreland,date)
filter(UKIreland_grp_date,unemployment==max(unemployment))
UKIreland_grp_date_order<-arrange(UKIreland_grp_date,date)
filter(UKIreland_grp_date_order,unemployment==max(unemployment))
UKIreland %>%
group_by(date) %>%
arrange(date) %>%
filter(unemployment==max(unemployment)) %>%
select(date,country,unemployment)
UKIreland %>%
group_by(country) %>%
summarise(mean=mean(unemployment))
UKIreland %>%
summarise(mean=mean(unemployment))
UKIreland %>%
group_by(country) %>%
summarise(mean=count(unemployment))
UKIreland %>%
group_by(country) %>%
summarise(mean=n())
shiny::runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/New folder/WhatR')
?textInput
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/New folder/WhatR')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/New folder/WhatR')
getwd()
setwd("C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/WhatR")
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/New folder/WhatR')
runApp('C:/Users/sdumb/Dropbox (SSD)/ssd-shiny-server/New folder/WhatR')
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?observe
runApp()
runApp()
getwd()
runApp()
runApp()
renderText()
?renderText()
runApp()
install.packages("wordcloud2")
library(wordcloud2)
?wordcloud2()
wordcloud2(demoFreq)
demoFreq
?renderPlot
tmp<-load(read.csv("https://shiny.stats4sd.org/WhatR/R.csv"))
?shiny::tabPanel()
mainPanel(
tabsetPanel(
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
library(stringr)
?str_split
str_split(tmp$Text," ")
tmp<-read.csv("R.csv",stringsAsFactors = FALSE)
str_split(tmp$Text," ")
str_split(tmp$Text," ",simplify=TRUE)
melt(str_split(tmp$Text," ",simplify=TRUE))
reshape2::melt(str_split(tmp$Text," ",simplify=TRUE))
stri_split_fixed(c("ab,c", "d,ef,g", ",h", ""), ",", omit_empty=FALSE, simplify=TRUE)
tringi::stri_split_fixed(c("ab,c", "d,ef,g", ",h", ""), ",", omit_empty=FALSE, simplify=TRUE)
stringi::stri_split_fixed(c("ab,c", "d,ef,g", ",h", ""), ",", omit_empty=FALSE, simplify=TRUE)
stringi::stri_split_fixed(c("ab,c", "d,ef,g", ",h", ""), ",", omit_empty=TRUE, simplify=TRUE)
?tm::removeWords()
removeWords(crude[[1]], stopwords("english"))
stopwords("english")
library(tm)
stopwords("english")
str_split(tmp$Text," ",simplify=TRUE)
unlist(str_split(tmp$Text," "))
tolower(unlist(str_split(c(tmp$Text,input$text1)," ")))
tolower(unlist(str_split(tmp$Text," ")))
runApp()
runApp()
runApp()
runApp()
runApp()
?renderWordcloud2
runApp()
runApp()
runApp()
tmp<-read.csv("R.csv",stringsAsFactors = FALSE)
t1<-removePunctuation(tolower(unlist(str_split(tmp$Text," "))))
t1
str_split(tmp$Text," ")
tmp$Text
str_split(tmp$Text," |  ")
str_split(tmp$Text," |and")
?removeWords()
str_split(stripWhitespace(tmp$Text)," |and")
str_split(stripWhitespace(tmp$Text))
stripWhitespace(tmp$Text)
tmp<-read.csv("R.csv",stringsAsFactors = FALSE)
tmp
runApp()
?wordcloud2
renv::init()
